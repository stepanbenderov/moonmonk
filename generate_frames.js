// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Node.js
// –¢—Ä–µ–±—É–µ—Ç: npm install fluent-ffmpeg

const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs');
const path = require('path');

const PUBLIC_DIR = path.join(__dirname, 'public');
const FRAMES_DIR = path.join(PUBLIC_DIR, 'frames');
const FPS = 15; // –ö–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
const QUALITY = 85; // –ö–∞—á–µ—Å—Ç–≤–æ WebP

// –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (fs.existsSync(FRAMES_DIR)) {
  fs.rmSync(FRAMES_DIR, { recursive: true });
}
fs.mkdirSync(FRAMES_DIR, { recursive: true });

console.log('üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–æ–≤ –¥–ª—è Moon Monk\n');

let currentFrameNum = 1;
const snapPoints = [1];

async function processVideo(videoNum) {
  const videoPath = path.join(PUBLIC_DIR, `part${videoNum}.mp4`);
  
  if (!fs.existsSync(videoPath)) {
    console.log(`‚ùå –§–∞–π–ª part${videoNum}.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return 0;
  }

  return new Promise((resolve, reject) => {
    console.log(`üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ part${videoNum}.mp4...`);
    
    ffmpeg(videoPath)
      .fps(FPS)
      .size('1920x?')
      .outputOptions([
        '-q:v 2',
        `-start_number ${currentFrameNum}`
      ])
      .output(path.join(FRAMES_DIR, 'frame_%04d.webp'))
      .on('end', function() {
        const files = fs.readdirSync(FRAMES_DIR)
          .filter(f => f.startsWith('frame_') && f.endsWith('.webp'));
        
        const lastFrame = files.length;
        snapPoints.push(lastFrame);
        
        console.log(`‚úÖ part${videoNum}.mp4 –æ–±—Ä–∞–±–æ—Ç–∞–Ω (${lastFrame - currentFrameNum + 1} –∫–∞–¥—Ä–æ–≤)`);
        currentFrameNum = lastFrame + 1;
        resolve(lastFrame - currentFrameNum + 1);
      })
      .on('error', function(err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
        reject(err);
      })
      .run();
  });
}

async function main() {
  try {
    for (let i = 1; i <= 4; i++) {
      await processVideo(i);
    }
    
    const totalFrames = fs.readdirSync(FRAMES_DIR)
      .filter(f => f.startsWith('frame_') && f.endsWith('.webp'))
      .length;
    
    console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìä –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: ${totalFrames}`);
    console.log(`üìç Snap points: [${snapPoints.join(', ')}]`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const info = `# Moon Monk Frame Info
–í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: ${totalFrames}
FPS: ${FPS}
Snap points: [${snapPoints.join(', ')}]

–û–±–Ω–æ–≤–∏—Ç–µ –≤ App.jsx:
const totalFrames = ${totalFrames}
const snapPoints = [${snapPoints.join(', ')}]
`;
    
    fs.writeFileSync(path.join(FRAMES_DIR, 'INFO.txt'), info);
    console.log('\nüíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ frames/INFO.txt');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

main();